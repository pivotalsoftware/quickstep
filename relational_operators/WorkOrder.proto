//   Copyright 2011-2015 Quickstep Technologies LLC.
//   Copyright 2015-2016 Pivotal Software, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto2";

package quickstep.serialization;

import "relational_operators/SortMergeRunOperator.proto";
import "relational_operators/TextScanOperator.proto";

enum WorkOrderType {
  AGGREGATION = 1;
  BUILD_HASH = 2;
  DELETE = 3;
  DESTROY_HASH = 4;
  DROP_TABLE = 5;
  FINALIZE_AGGREGATION = 6;
  HASH_JOIN = 7;
  INSERT = 8;
  NESTED_LOOP_JOIN = 9;
  SAVE_BLOCKS = 10;
  SELECT = 11;
  SORT_MERGE_RUN = 12;
  SORT_RUN_GENERATION = 13;
  TEXT_SCAN = 14;
  TEXT_SPLIT = 15;
  UPDATE = 16;
}

message WorkOrder {
  required WorkOrderType work_order_type = 1;

  // The convention for extension numbering is that extensions for a particular
  // WorkOrderID should begin from (operator_type + 1) * 16.
  extensions 16 to max;
}

message AggregationWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint32 aggr_state_index = 16;
    optional fixed64 block_id = 17;
  }
}

message BuildHashWorkOrder {
  extend WorkOrder {
    // All required.
    optional int32 relation_id = 32;
    repeated int32 join_key_attributes = 33;
    optional bool any_join_key_attributes_nullable = 34;
    optional uint32 join_hash_table_index = 35;
    optional fixed64 block_id = 36;
  }
}

message DeleteWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint64 operator_index = 48;
    optional int32 relation_id = 49;
    optional int32 predicate_index = 50;
    optional fixed64 block_id = 51;
  }
}

message DestroyHashWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint32 join_hash_table_index = 64;
  }
}

message DropTableWorkOrder {
  extend WorkOrder {
    // Optional, and maybe empty.
    repeated fixed64 block_ids = 80;
  }
}

message FinalizeAggregationWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint32 aggr_state_index = 96;
    optional int32 insert_destination_index = 97;
  }
}

message HashJoinWorkOrder {
  extend WorkOrder {
    // All required.
    optional int32 build_relation_id = 112;
    optional int32 probe_relation_id = 113;
    repeated int32 join_key_attributes = 114;
    optional bool any_join_key_attributes_nullable = 115;
    optional int32 insert_destination_index = 116;
    optional uint32 join_hash_table_index = 117;
    optional int32 residual_predicate_index = 118;
    optional int32 selection_index = 119;
    optional fixed64 block_id = 120;
  }
}

message InsertWorkOrder {
  extend WorkOrder {
    // All required.
    optional int32 insert_destination_index = 128;
    optional uint32 tuple_index = 129;
  }
}

message NestedLoopsJoinWorkOrder {
  extend WorkOrder {
    // All required.
    optional int32 left_relation_id = 144;
    optional int32 right_relation_id = 145;
    optional fixed64 left_block_id = 146;
    optional fixed64 right_block_id = 147;
    optional int32 insert_destination_index = 148;
    optional int32 join_predicate_index = 149;
    optional int32 selection_index = 150;
  }
}

message SaveBlocksWorkOrder {
  extend WorkOrder {
    // All required.
    optional fixed64 block_id = 160;
    optional bool force = 161;
  }
}

message SelectWorkOrder {
  extend WorkOrder {
    // All required.
    optional int32 relation_id = 176;
    optional int32 insert_destination_index = 177;
    optional int32 predicate_index = 178;
    optional fixed64 block_id = 179;
    optional bool simple_projection = 180;

    // When 'simple_projection' is true.
    repeated int32 simple_selection = 181;

    // Otherwise.
    optional int32 selection_index = 182;
  }
}

message SortMergeRunWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint64 operator_index = 192;
    optional uint64 sort_config_id = 193;
    repeated Run runs = 194;
    optional uint64 top_k = 195;
    optional uint64 merge_level = 196;
    optional int32 relation_id = 197;
    optional int32 insert_destination_index = 198;
  }
}

message SortRunGenerationWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint64 sort_config_id = 208;
    optional int32 relation_id = 209;
    optional int32 insert_destination_index = 210;
    optional fixed64 block_id = 211;
  }
}

message TextScanWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint32 field_terminator = 224;  // Represent one-byte char.
    optional bool process_escape_sequences = 225;
    optional int32 insert_destination_index = 226;

    // Either
    optional string filename = 227;

    // Or
    optional TextBlob text_blob = 228;
  }
}

message TextSplitWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint64 operator_index = 240;
    optional string filename = 241;
    optional bool process_escape_sequences = 242;
  }
}

message UpdateWorkOrder {
  extend WorkOrder {
    // All required.
    optional uint64 operator_index = 256;
    optional int32 relation_id = 257;
    optional int32 insert_destination_index = 258;
    optional int32 predicate_index = 259;
    optional uint32 update_group_index = 260;
    optional fixed64 block_id = 261;
  }
}
